plugins {
    id "java-library"
    id "signing"
    id "maven-publish"
    id "jacoco"
    id "com.github.hierynomus.license" version "0.16.1"
    id "org.sonarqube" version "6.0.1.5171"
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id "com.github.ben-manes.versions" version "0.51.0"
    id "org.sonatype.gradle.plugins.scan" version "2.8.3"
}

group = 'com.github.kaklakariada'
version = '1.7.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    failOnError = false
    options.addBooleanOption('html5', true)
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:all'
    options.encoding = 'UTF-8'
}

testing {
    suites { 
        test { 
            useJUnitJupiter() 
        }
    }
}

dependencies {
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    //implementation 'com.squareup.okio:okio:3.6.0' // Fix CVE-2023-3635
    implementation 'com.subshell.simpleframework:simple-xml:2.9.0'
    implementation 'org.slf4j:slf4j-api:2.0.16'
    
    testRuntimeOnly 'ch.qos.logback:logback-classic:1.5.15'
    
    testImplementation 'org.mockito:mockito-core:5.14.2'
    testImplementation 'org.assertj:assertj-core:3.27.0'
}

license {
    header = file('gradle/license-header.txt')
    exclude('**/deviceList*Payload.xml')
    exclude('devicelist6840.xml')
    exclude('**/FritzOS29/*.xml')
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

sonar {
  properties {
    property("sonar.organization", "kaklakariada-github")
    property("sonar.host.url", "https://sonarcloud.io")
    property("sonar.gradle.skipCompile", "true")
  }
}

rootProject.tasks["sonarqube"].dependsOn(tasks["jacocoTestReport"])

def getOptionalProperty(String name) {
    if(project.hasProperty(name)) {
        return project.property(name)
    }
    logger.info("Project property '${name}' not available. Please add it to ~/.gradle/gradle.properties")
    return null
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'FritzBox Java API'
                description = 'Java API for managing FritzBox HomeAutomation '
                url = 'https://github.com/kaklakariada/fritzbox-java-api'

                licenses {
                    license {
                        name = 'GNU General Public License, Version 3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'kaklakariada'
                        name = 'Christoph'
                        email = 'kaklakariada@chp1.net'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/kaklakariada/fritzbox-java-api.git'
                    developerConnection = 'scm:git:https://github.com/kaklakariada/fritzbox-java-api.git'
                    url = 'https://github.com/kaklakariada/fritzbox-java-api'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            allowInsecureProtocol = false
            credentials(PasswordCredentials) {
                username = getOptionalProperty("ossrhUsername")
                password = getOptionalProperty("ossrhPassword")
            }
        }
    }
}


signing {
    sign publishing.publications.mavenJava
}

nexusPublishing {
    packageGroup = project.group
    repositories {
        sonatype {
            stagingProfileId = "4f1b95618be44"
            username = getOptionalProperty("ossrhUsername")
            password = getOptionalProperty("ossrhPassword")
        }
    }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
  gradleReleaseChannel = "current"
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}

ossIndexAudit {
    allConfigurations = false
    useCache = true
    excludeVulnerabilityIds = []
    printBanner = false
}

rootProject.tasks["build"].dependsOn(tasks["ossIndexAudit"])
